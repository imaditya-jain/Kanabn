Here’s a temporary model setup for each entity based on the relationships you’ve mentioned:

### ** 1. SuperAdmin Model **
  SuperAdmin manages companies and has the ability to create and manage them.

```javascript
import mongoose, { Document, Schema, Types, Model } from "mongoose";

export interface ISuperAdmin extends Document {
  name: string;
  email: string;
  password: string;
  created_companies: Types.ObjectId[];
}

const superAdminSchema = new Schema<ISuperAdmin>({
  name: { type: String, required: true },
  email: { type: String, required: true, unique: true },
  password: { type: String, required: true },
  created_companies: [{ type: mongoose.Schema.Types.ObjectId, ref: 'Company' }]
});

const SuperAdmin: Model<ISuperAdmin> = mongoose.model('SuperAdmin', superAdminSchema);

export default SuperAdmin;
```

---

### ** 2. Company Model **
  The Company is owned by the SuperAdmin and linked to users, tasks, projects, teams, attendance, and leaves.

```javascript
import mongoose, { Document, Schema, Types, Model } from "mongoose";
import { IUser } from "./User";
import { ITask } from "./Task";
import { IProject } from "./Project";
import { ITeam } from "./Team";
import { IAttendance } from "./Attendance";
import { ILeave } from "./Leave";

export interface ICompany extends Document {
  name: string;
  address: string;
  superAdmin_id: Types.ObjectId;
  users: Types.ObjectId[]; // Employee & Manager references
  tasks: Types.ObjectId[];
  projects: Types.ObjectId[];
  teams: Types.ObjectId[];
  attendance: Types.ObjectId[];
  leaves: Types.ObjectId[];
}

const companySchema = new Schema<ICompany>({
  name: { type: String, required: true },
  address: { type: String, required: true },
  superAdmin_id: { type: mongoose.Schema.Types.ObjectId, ref: 'SuperAdmin', required: true },
  users: [{ type: mongoose.Schema.Types.ObjectId, ref: 'User' }],
  tasks: [{ type: mongoose.Schema.Types.ObjectId, ref: 'Task' }],
  projects: [{ type: mongoose.Schema.Types.ObjectId, ref: 'Project' }],
  teams: [{ type: mongoose.Schema.Types.ObjectId, ref: 'Team' }],
  attendance: [{ type: mongoose.Schema.Types.ObjectId, ref: 'Attendance' }],
  leaves: [{ type: mongoose.Schema.Types.ObjectId, ref: 'Leave' }],
});

const Company: Model<ICompany> = mongoose.model('Company', companySchema);

export default Company;
```

---

### ** 3. User Model(Employee & Manager) **
  Users(employees and managers) are linked to the company, tasks, teams, attendance, and leaves.

```javascript
import mongoose, { Document, Schema, Types, Model } from "mongoose";
import { ICompany } from "./Company";
import { ITask } from "./Task";
import { ITeam } from "./Team";
import { IAttendance } from "./Attendance";
import { ILeave } from "./Leave";

export enum Role {
  MANAGER = 'manager',
  EMPLOYEE = 'employee',
}

export interface IUser extends Document {
  firstName: string;
  lastName: string;
  email: string;
  role: Role;
  company_id: Types.ObjectId; // Company the user belongs to
  manager_id?: Types.ObjectId; // For employees, this references the manager
  tasks: Types.ObjectId[]; // Tasks assigned to the user
  teams: Types.ObjectId[]; // Teams the user is a part of
  attendance: Types.ObjectId[]; // Attendance logs
  leaves: Types.ObjectId[]; // Leave requests
}

const userSchema = new Schema<IUser>({
  firstName: { type: String, required: true },
  lastName: { type: String, required: true },
  email: { type: String, required: true, unique: true },
  role: { type: String, enum: Object.values(Role), required: true },
  company_id: { type: mongoose.Schema.Types.ObjectId, ref: 'Company', required: true },
  manager_id: { type: mongoose.Schema.Types.ObjectId, ref: 'User' },
  tasks: [{ type: mongoose.Schema.Types.ObjectId, ref: 'Task' }],
  teams: [{ type: mongoose.Schema.Types.ObjectId, ref: 'Team' }],
  attendance: [{ type: mongoose.Schema.Types.ObjectId, ref: 'Attendance' }],
  leaves: [{ type: mongoose.Schema.Types.ObjectId, ref: 'Leave' }],
});

const User: Model<IUser> = mongoose.model('User', userSchema);

export default User;
```

---

### ** 4. Task Model **
  Tasks are assigned to users and associated with a company.

```javascript
import mongoose, { Document, Schema, Types, Model } from "mongoose";

export interface ITask extends Document {
  title: string;
  description: string;
  assigned_to: Types.ObjectId; // Assigned user
  created_by: Types.ObjectId; // Creator (Manager/Admin)
  company_id: Types.ObjectId; // Company the task belongs to
}

const taskSchema = new Schema<ITask>({
  title: { type: String, required: true },
  description: { type: String, required: true },
  assigned_to: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
  created_by: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
  company_id: { type: mongoose.Schema.Types.ObjectId, ref: 'Company', required: true },
});

const Task: Model<ITask> = mongoose.model('Task', taskSchema);

export default Task;
```

---

### ** 5. Team Model **
  Teams belong to companies and consist of multiple users.

```javascript
import mongoose, { Document, Schema, Types, Model } from "mongoose";

export interface ITeam extends Document {
  name: string;
  company_id: Types.ObjectId; // Company the team belongs to
  users: Types.ObjectId[]; // Users assigned to the team
}

const teamSchema = new Schema<ITeam>({
  name: { type: String, required: true },
  company_id: { type: mongoose.Schema.Types.ObjectId, ref: 'Company', required: true },
  users: [{ type: mongoose.Schema.Types.ObjectId, ref: 'User' }],
});

const Team: Model<ITeam> = mongoose.model('Team', teamSchema);

export default Team;
```

---

### ** 6. Project Model **
  Projects are linked to teams and companies.

```javascript
import mongoose, { Document, Schema, Types, Model } from "mongoose";

export interface IProject extends Document {
  name: string;
  description: string;
  team_id: Types.ObjectId; // Team working on the project
  company_id: Types.ObjectId; // Company the project belongs to
  users: Types.ObjectId[]; // Users assigned to the project
}

const projectSchema = new Schema<IProject>({
  name: { type: String, required: true },
  description: { type: String, required: true },
  team_id: { type: mongoose.Schema.Types.ObjectId, ref: 'Team', required: true },
  company_id: { type: mongoose.Schema.Types.ObjectId, ref: 'Company', required: true },
  users: [{ type: mongoose.Schema.Types.ObjectId, ref: 'User' }],
});

const Project: Model<IProject> = mongoose.model('Project', projectSchema);

export default Project;
```

---

### ** 7. Attendance Model **
  Attendance records belong to users and are linked to companies.

```javascript
import mongoose, { Document, Schema, Types, Model } from "mongoose";

export interface IAttendance extends Document {
  user_id: Types.ObjectId; // User the attendance belongs to
  company_id: Types.ObjectId; // Company the user belongs to
  check_in: Date;
  check_out: Date;
  status: string; // Present, Absent, etc.
}

const attendanceSchema = new Schema<IAttendance>({
  user_id: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
  company_id: { type: mongoose.Schema.Types.ObjectId, ref: 'Company', required: true },
  check_in: { type: Date, required: true },
  check_out: { type: Date },
  status: { type: String, required: true },
});

const Attendance: Model<IAttendance> = mongoose.model('Attendance', attendanceSchema);

export default Attendance;
```

---

### ** 8. Leave Model **
  Leave records belong to users and are linked to companies and managers.

```javascript
import mongoose, { Document, Schema, Types, Model } from "mongoose";

export interface ILeave extends Document {
  user_id: Types.ObjectId; // User requesting the leave
  manager_id: Types.ObjectId; // Manager approving the leave
  start_date: Date;
  end_date: Date;
  status: string; // Pending, Approved, Rejected
  reason: string;
  company_id: Types.ObjectId; // Company the user belongs to
}

const leaveSchema = new Schema<ILeave>({
  user_id: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
  manager_id: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
  start_date: { type: Date, required: true },
  end_date: { type: Date, required: true },
  status: { type: String, required: true },
  reason: { type: String, required: true },
  company_id: { type: mongoose

.Schema.Types.ObjectId, ref: 'Company', required: true },
});

const Leave: Model<ILeave> = mongoose.model('Leave', leaveSchema);

export default Leave;
```

---

### Conclusion
This set of models defines relationships where:
- ** SuperAdmin ** manages ** Companies **.
- ** Companies ** contain ** Users **, ** Teams **, ** Projects **, ** Tasks **, ** Attendance **, and ** Leaves **.
- ** Users ** (Employees and Managers) are linked to ** Tasks **, ** Teams **, ** Attendance **, and ** Leaves **.
- ** Teams ** and ** Projects ** belong to ** Companies ** and contain ** Users **.

This structure should provide a solid foundation for managing companies, teams, tasks, and users.Let me know if you need any adjustments or additional features!